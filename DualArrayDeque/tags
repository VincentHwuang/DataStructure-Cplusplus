!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARRAYSTACK_H	arraystack.h	8;"	d
ARRAY_H	array.h	8;"	d
Add	arraystack.cpp	/^	template void CArrayStack<int*>::Add(int,int*);$/;"	p	class:ArrayStack::CArrayStack	file:	signature:(int,int*)
Add	arraystack.cpp	/^	template void CArrayStack<int>::Add(int,int);$/;"	p	class:ArrayStack::CArrayStack	file:	signature:(int,int)
Add	arraystack.h	/^		virtual void Add(int Index,T NewElem);$/;"	p	class:ArrayStack::CArrayStack	access:public	signature:(int Index,T NewElem)
Add	arraystack.h	/^void CArrayStack<T>::Add(int Index,T NewElem)$/;"	f	class:ArrayStack::CArrayStack	signature:(int Index,T NewElem)
Add	dualarraydeque.h	/^		void Add(int Index,T NewElem);$/;"	p	class:DualArrayDeque::CDualArrayDeque	access:public	signature:(int Index,T NewElem)
Array	array.h	/^namespace Array $/;"	n
Array	arraystack.h	/^		CArray<T> Array;$/;"	m	class:ArrayStack::CArrayStack	access:protected
Array::CArray	array.h	/^class CArray $/;"	c	namespace:Array
Array::CArray::CArray	array.h	/^		CArray(int LengthValue);$/;"	p	class:Array::CArray	access:public	signature:(int LengthValue)
Array::CArray::CArray	array.h	/^		CArray(int LengthValue,T Initialization);$/;"	p	class:Array::CArray	access:public	signature:(int LengthValue,T Initialization)
Array::CArray::CArray	array.h	/^CArray<T>::CArray(int LengthValue)$/;"	f	class:Array::CArray	signature:(int LengthValue)
Array::CArray::CArray	array.h	/^CArray<T>::CArray(int LengthValue,T Initialization)$/;"	f	class:Array::CArray	signature:(int LengthValue,T Initialization)
Array::CArray::CopyOfRange	array.h	/^		void CopyOfRange(CArray<T> &SourceArray,int StartIndex,int EndIndex);$/;"	p	class:Array::CArray	access:public	signature:(CArray<T> &SourceArray,int StartIndex,int EndIndex)
Array::CArray::CopyOfRange	array.h	/^void CArray<T>::CopyOfRange(CArray<T> &SourceArray,int StartIndex,int EndIndex)$/;"	f	class:Array::CArray	signature:(CArray<T> &SourceArray,int StartIndex,int EndIndex)
Array::CArray::Fill	array.h	/^		void Fill(T value);$/;"	p	class:Array::CArray	access:public	signature:(T value)
Array::CArray::Fill	array.h	/^void CArray<T>::Fill(T Value)$/;"	f	class:Array::CArray	signature:(T Value)
Array::CArray::Length	array.h	/^		int Length;$/;"	m	class:Array::CArray	access:public
Array::CArray::PrintInfo	array.h	/^		void PrintInfo(void);$/;"	p	class:Array::CArray	access:public	signature:(void)
Array::CArray::PrintInfo	array.h	/^void CArray<T>::PrintInfo(void)$/;"	f	class:Array::CArray	signature:(void)
Array::CArray::Reverse	array.h	/^		virtual void Reverse();$/;"	p	class:Array::CArray	access:public	signature:()
Array::CArray::Reverse	array.h	/^void CArray<T>::Reverse()$/;"	f	class:Array::CArray	signature:()
Array::CArray::SetValue	array.h	/^		void SetValue(int Index,T Value);$/;"	p	class:Array::CArray	access:public	signature:(int Index,T Value)
Array::CArray::SetValue	array.h	/^void CArray<T>::SetValue(int Index,T Value)$/;"	f	class:Array::CArray	signature:(int Index,T Value)
Array::CArray::operator +	array.h	/^		T* operator+(int i);$/;"	p	class:Array::CArray	access:public	signature:(int i)
Array::CArray::operator +	array.h	/^T* CArray<T>::operator+(int i)$/;"	f	class:Array::CArray	signature:(int i)
Array::CArray::operator =	array.h	/^		CArray<T>& operator=(CArray<T> &ArrayB);$/;"	p	class:Array::CArray	access:public	signature:(CArray<T> &ArrayB)
Array::CArray::operator =	array.h	/^CArray<T>& CArray<T>::operator=(CArray<T> &ArrayB)$/;"	f	class:Array::CArray	signature:(CArray<T> &ArrayB)
Array::CArray::operator []	array.h	/^		T& operator[](int Index);$/;"	p	class:Array::CArray	access:public	signature:(int Index)
Array::CArray::operator []	array.h	/^T& CArray<T>::operator[](int Index)$/;"	f	class:Array::CArray	signature:(int Index)
Array::CArray::pArray	array.h	/^		T *pArray;$/;"	m	class:Array::CArray	access:protected
Array::CArray::swap	array.h	/^		void swap(int i,int j);$/;"	p	class:Array::CArray	access:public	signature:(int i,int j)
Array::CArray::swap	array.h	/^void CArray<T>::swap(int i,int j)$/;"	f	class:Array::CArray	signature:(int i,int j)
Array::CArray::~CArray	array.h	/^		virtual ~CArray();$/;"	p	class:Array::CArray	access:public	signature:()
Array::CArray::~CArray	array.h	/^CArray<T>::~CArray()$/;"	f	class:Array::CArray	signature:()
ArrayStack	arraystack.cpp	/^namespace ArrayStack$/;"	n	file:
ArrayStack	arraystack.h	/^namespace ArrayStack$/;"	n
ArrayStack::CArrayStack	arraystack.h	/^class CArrayStack$/;"	c	namespace:ArrayStack
ArrayStack::CArrayStack::Add	arraystack.cpp	/^	template void CArrayStack<int*>::Add(int,int*);$/;"	p	class:ArrayStack::CArrayStack	file:	signature:(int,int*)
ArrayStack::CArrayStack::Add	arraystack.cpp	/^	template void CArrayStack<int>::Add(int,int);$/;"	p	class:ArrayStack::CArrayStack	file:	signature:(int,int)
ArrayStack::CArrayStack::Add	arraystack.h	/^		virtual void Add(int Index,T NewElem);$/;"	p	class:ArrayStack::CArrayStack	access:public	signature:(int Index,T NewElem)
ArrayStack::CArrayStack::Add	arraystack.h	/^void CArrayStack<T>::Add(int Index,T NewElem)$/;"	f	class:ArrayStack::CArrayStack	signature:(int Index,T NewElem)
ArrayStack::CArrayStack::Array	arraystack.h	/^		CArray<T> Array;$/;"	m	class:ArrayStack::CArrayStack	access:protected
ArrayStack::CArrayStack::CArrayStack	arraystack.cpp	/^	template CArrayStack<int*>::CArrayStack();$/;"	p	class:ArrayStack::CArrayStack	file:	signature:()
ArrayStack::CArrayStack::CArrayStack	arraystack.cpp	/^	template CArrayStack<int>::CArrayStack();$/;"	p	class:ArrayStack::CArrayStack	file:	signature:()
ArrayStack::CArrayStack::CArrayStack	arraystack.h	/^		CArrayStack();$/;"	p	class:ArrayStack::CArrayStack	access:public	signature:()
ArrayStack::CArrayStack::CArrayStack	arraystack.h	/^CArrayStack<T>::CArrayStack() : Array(1)$/;"	f	class:ArrayStack::CArrayStack	signature:()
ArrayStack::CArrayStack::Clear	arraystack.h	/^		virtual void Clear();$/;"	p	class:ArrayStack::CArrayStack	access:public	signature:()
ArrayStack::CArrayStack::Clear	arraystack.h	/^void CArrayStack<T>::Clear()$/;"	f	class:ArrayStack::CArrayStack	signature:()
ArrayStack::CArrayStack::Count	arraystack.h	/^		int		  Count;$/;"	m	class:ArrayStack::CArrayStack	access:protected
ArrayStack::CArrayStack::Get	arraystack.h	/^		T Get(int Index);$/;"	p	class:ArrayStack::CArrayStack	access:public	signature:(int Index)
ArrayStack::CArrayStack::Get	arraystack.h	/^T CArrayStack<T>::Get(int Index)$/;"	f	class:ArrayStack::CArrayStack	signature:(int Index)
ArrayStack::CArrayStack::Pop	arraystack.h	/^		virtual T Pop();$/;"	p	class:ArrayStack::CArrayStack	access:public	signature:()
ArrayStack::CArrayStack::Pop	arraystack.h	/^T CArrayStack<T>::Pop()$/;"	f	class:ArrayStack::CArrayStack	signature:()
ArrayStack::CArrayStack::PrintInfo	arraystack.h	/^		void PrintInfo();$/;"	p	class:ArrayStack::CArrayStack	access:public	signature:()
ArrayStack::CArrayStack::PrintInfo	arraystack.h	/^void CArrayStack<T>::PrintInfo() $/;"	f	class:ArrayStack::CArrayStack	signature:()
ArrayStack::CArrayStack::Push	arraystack.h	/^		virtual void Push(T NewElem);$/;"	p	class:ArrayStack::CArrayStack	access:public	signature:(T NewElem)
ArrayStack::CArrayStack::Push	arraystack.h	/^void CArrayStack<T>::Push(T NewElem)$/;"	f	class:ArrayStack::CArrayStack	signature:(T NewElem)
ArrayStack::CArrayStack::Remove	arraystack.cpp	/^	template int  CArrayStack<int>::Remove(int);$/;"	p	class:ArrayStack::CArrayStack	file:	signature:(int)
ArrayStack::CArrayStack::Remove	arraystack.cpp	/^	template int* CArrayStack<int*>::Remove(int);$/;"	p	class:ArrayStack::CArrayStack	file:	signature:(int)
ArrayStack::CArrayStack::Remove	arraystack.h	/^		virtual T Remove(int Index);$/;"	p	class:ArrayStack::CArrayStack	access:public	signature:(int Index)
ArrayStack::CArrayStack::Remove	arraystack.h	/^T CArrayStack<T>::Remove(int Index)$/;"	f	class:ArrayStack::CArrayStack	signature:(int Index)
ArrayStack::CArrayStack::Resize	arraystack.h	/^		virtual void Resize();$/;"	p	class:ArrayStack::CArrayStack	access:protected	signature:()
ArrayStack::CArrayStack::Resize	arraystack.h	/^void CArrayStack<T>::Resize()$/;"	f	class:ArrayStack::CArrayStack	signature:()
ArrayStack::CArrayStack::Set	arraystack.h	/^		T Set(int Index,T NewElem);$/;"	p	class:ArrayStack::CArrayStack	access:public	signature:(int Index,T NewElem)
ArrayStack::CArrayStack::Set	arraystack.h	/^T CArrayStack<T>::Set(int Index,T NewElem)$/;"	f	class:ArrayStack::CArrayStack	signature:(int Index,T NewElem)
ArrayStack::CArrayStack::Size	arraystack.h	/^		int Size();$/;"	p	class:ArrayStack::CArrayStack	access:public	signature:()
ArrayStack::CArrayStack::Size	arraystack.h	/^int CArrayStack<T>::Size()$/;"	f	class:ArrayStack::CArrayStack	signature:()
ArrayStack::CArrayStack::~CArrayStack	arraystack.cpp	/^	template CArrayStack<int*>::~CArrayStack();$/;"	p	class:ArrayStack::CArrayStack	file:	signature:()
ArrayStack::CArrayStack::~CArrayStack	arraystack.cpp	/^	template CArrayStack<int>::~CArrayStack();$/;"	p	class:ArrayStack::CArrayStack	file:	signature:()
ArrayStack::CArrayStack::~CArrayStack	arraystack.h	/^		virtual ~CArrayStack();$/;"	p	class:ArrayStack::CArrayStack	access:public	signature:()
ArrayStack::CArrayStack::~CArrayStack	arraystack.h	/^CArrayStack<T>::~CArrayStack()$/;"	f	class:ArrayStack::CArrayStack	signature:()
Back	dualarraydeque.h	/^		CArrayStack<T> Back;$/;"	m	class:DualArrayDeque::CDualArrayDeque	access:protected
Balance	dualarraydeque.h	/^		void Balance();$/;"	p	class:DualArrayDeque::CDualArrayDeque	access:protected	signature:()
CArray	array.h	/^		CArray(int LengthValue);$/;"	p	class:Array::CArray	access:public	signature:(int LengthValue)
CArray	array.h	/^		CArray(int LengthValue,T Initialization);$/;"	p	class:Array::CArray	access:public	signature:(int LengthValue,T Initialization)
CArray	array.h	/^CArray<T>::CArray(int LengthValue)$/;"	f	class:Array::CArray	signature:(int LengthValue)
CArray	array.h	/^CArray<T>::CArray(int LengthValue,T Initialization)$/;"	f	class:Array::CArray	signature:(int LengthValue,T Initialization)
CArray	array.h	/^class CArray $/;"	c	namespace:Array
CArrayStack	arraystack.cpp	/^	template CArrayStack<int*>::CArrayStack();$/;"	p	class:ArrayStack::CArrayStack	file:	signature:()
CArrayStack	arraystack.cpp	/^	template CArrayStack<int>::CArrayStack();$/;"	p	class:ArrayStack::CArrayStack	file:	signature:()
CArrayStack	arraystack.h	/^		CArrayStack();$/;"	p	class:ArrayStack::CArrayStack	access:public	signature:()
CArrayStack	arraystack.h	/^CArrayStack<T>::CArrayStack() : Array(1)$/;"	f	class:ArrayStack::CArrayStack	signature:()
CArrayStack	arraystack.h	/^class CArrayStack$/;"	c	namespace:ArrayStack
CDualArrayDeque	dualarraydeque.h	/^		CDualArrayDeque();$/;"	p	class:DualArrayDeque::CDualArrayDeque	access:public	signature:()
CDualArrayDeque	dualarraydeque.h	/^CDualArrayDeque<T>::CDualArrayDeque()$/;"	f	class:DualArrayDeque::CDualArrayDeque	signature:()
CDualArrayDeque	dualarraydeque.h	/^class CDualArrayDeque$/;"	c	namespace:DualArrayDeque
Clear	arraystack.h	/^		virtual void Clear();$/;"	p	class:ArrayStack::CArrayStack	access:public	signature:()
Clear	arraystack.h	/^void CArrayStack<T>::Clear()$/;"	f	class:ArrayStack::CArrayStack	signature:()
CopyOfRange	array.h	/^		void CopyOfRange(CArray<T> &SourceArray,int StartIndex,int EndIndex);$/;"	p	class:Array::CArray	access:public	signature:(CArray<T> &SourceArray,int StartIndex,int EndIndex)
CopyOfRange	array.h	/^void CArray<T>::CopyOfRange(CArray<T> &SourceArray,int StartIndex,int EndIndex)$/;"	f	class:Array::CArray	signature:(CArray<T> &SourceArray,int StartIndex,int EndIndex)
Count	arraystack.h	/^		int		  Count;$/;"	m	class:ArrayStack::CArrayStack	access:protected
DUALARRAYDEQUE_H	dualarraydeque.h	8;"	d
DualArrayDeque	dualarraydeque.h	/^namespace DualArrayDeque$/;"	n
DualArrayDeque::CDualArrayDeque	dualarraydeque.h	/^class CDualArrayDeque$/;"	c	namespace:DualArrayDeque
DualArrayDeque::CDualArrayDeque::Add	dualarraydeque.h	/^		void Add(int Index,T NewElem);$/;"	p	class:DualArrayDeque::CDualArrayDeque	access:public	signature:(int Index,T NewElem)
DualArrayDeque::CDualArrayDeque::Back	dualarraydeque.h	/^		CArrayStack<T> Back;$/;"	m	class:DualArrayDeque::CDualArrayDeque	access:protected
DualArrayDeque::CDualArrayDeque::Balance	dualarraydeque.h	/^		void Balance();$/;"	p	class:DualArrayDeque::CDualArrayDeque	access:protected	signature:()
DualArrayDeque::CDualArrayDeque::CDualArrayDeque	dualarraydeque.h	/^		CDualArrayDeque();$/;"	p	class:DualArrayDeque::CDualArrayDeque	access:public	signature:()
DualArrayDeque::CDualArrayDeque::CDualArrayDeque	dualarraydeque.h	/^CDualArrayDeque<T>::CDualArrayDeque()$/;"	f	class:DualArrayDeque::CDualArrayDeque	signature:()
DualArrayDeque::CDualArrayDeque::Front	dualarraydeque.h	/^		CArrayStack<T> Front;$/;"	m	class:DualArrayDeque::CDualArrayDeque	access:protected
DualArrayDeque::CDualArrayDeque::Get	dualarraydeque.h	/^		T Get(int Index);$/;"	p	class:DualArrayDeque::CDualArrayDeque	access:public	signature:(int Index)
DualArrayDeque::CDualArrayDeque::PrintInfo	dualarraydeque.h	/^		void PrintInfo();$/;"	p	class:DualArrayDeque::CDualArrayDeque	access:public	signature:()
DualArrayDeque::CDualArrayDeque::Size	dualarraydeque.h	/^		int Size();$/;"	p	class:DualArrayDeque::CDualArrayDeque	access:public	signature:()
DualArrayDeque::CDualArrayDeque::~CDualArrayDeque	dualarraydeque.h	/^		virtual ~CDualArrayDeque();$/;"	p	class:DualArrayDeque::CDualArrayDeque	access:public	signature:()
DualArrayDeque::CDualArrayDeque::~CDualArrayDeque	dualarraydeque.h	/^CDualArrayDeque<T>::~CDualArrayDeque()$/;"	f	class:DualArrayDeque::CDualArrayDeque	signature:()
Fill	array.h	/^		void Fill(T value);$/;"	p	class:Array::CArray	access:public	signature:(T value)
Fill	array.h	/^void CArray<T>::Fill(T Value)$/;"	f	class:Array::CArray	signature:(T Value)
Front	dualarraydeque.h	/^		CArrayStack<T> Front;$/;"	m	class:DualArrayDeque::CDualArrayDeque	access:protected
Get	arraystack.h	/^		T Get(int Index);$/;"	p	class:ArrayStack::CArrayStack	access:public	signature:(int Index)
Get	arraystack.h	/^T CArrayStack<T>::Get(int Index)$/;"	f	class:ArrayStack::CArrayStack	signature:(int Index)
Get	dualarraydeque.h	/^		T Get(int Index);$/;"	p	class:DualArrayDeque::CDualArrayDeque	access:public	signature:(int Index)
Length	array.h	/^		int Length;$/;"	m	class:Array::CArray	access:public
Max	utils.h	/^T Max(T a,T b)$/;"	f	namespace:Utility	signature:(T a,T b)
Min	utils.h	/^T Min(T a,T b)$/;"	f	namespace:Utility	signature:(T a,T b)
Pop	arraystack.h	/^		virtual T Pop();$/;"	p	class:ArrayStack::CArrayStack	access:public	signature:()
Pop	arraystack.h	/^T CArrayStack<T>::Pop()$/;"	f	class:ArrayStack::CArrayStack	signature:()
PrintInfo	array.h	/^		void PrintInfo(void);$/;"	p	class:Array::CArray	access:public	signature:(void)
PrintInfo	array.h	/^void CArray<T>::PrintInfo(void)$/;"	f	class:Array::CArray	signature:(void)
PrintInfo	arraystack.h	/^		void PrintInfo();$/;"	p	class:ArrayStack::CArrayStack	access:public	signature:()
PrintInfo	arraystack.h	/^void CArrayStack<T>::PrintInfo() $/;"	f	class:ArrayStack::CArrayStack	signature:()
PrintInfo	dualarraydeque.h	/^		void PrintInfo();$/;"	p	class:DualArrayDeque::CDualArrayDeque	access:public	signature:()
Push	arraystack.h	/^		virtual void Push(T NewElem);$/;"	p	class:ArrayStack::CArrayStack	access:public	signature:(T NewElem)
Push	arraystack.h	/^void CArrayStack<T>::Push(T NewElem)$/;"	f	class:ArrayStack::CArrayStack	signature:(T NewElem)
Remove	arraystack.cpp	/^	template int  CArrayStack<int>::Remove(int);$/;"	p	class:ArrayStack::CArrayStack	file:	signature:(int)
Remove	arraystack.cpp	/^	template int* CArrayStack<int*>::Remove(int);$/;"	p	class:ArrayStack::CArrayStack	file:	signature:(int)
Remove	arraystack.h	/^		virtual T Remove(int Index);$/;"	p	class:ArrayStack::CArrayStack	access:public	signature:(int Index)
Remove	arraystack.h	/^T CArrayStack<T>::Remove(int Index)$/;"	f	class:ArrayStack::CArrayStack	signature:(int Index)
Resize	arraystack.h	/^		virtual void Resize();$/;"	p	class:ArrayStack::CArrayStack	access:protected	signature:()
Resize	arraystack.h	/^void CArrayStack<T>::Resize()$/;"	f	class:ArrayStack::CArrayStack	signature:()
Reverse	array.h	/^		virtual void Reverse();$/;"	p	class:Array::CArray	access:public	signature:()
Reverse	array.h	/^void CArray<T>::Reverse()$/;"	f	class:Array::CArray	signature:()
Set	arraystack.h	/^		T Set(int Index,T NewElem);$/;"	p	class:ArrayStack::CArrayStack	access:public	signature:(int Index,T NewElem)
Set	arraystack.h	/^T CArrayStack<T>::Set(int Index,T NewElem)$/;"	f	class:ArrayStack::CArrayStack	signature:(int Index,T NewElem)
SetValue	array.h	/^		void SetValue(int Index,T Value);$/;"	p	class:Array::CArray	access:public	signature:(int Index,T Value)
SetValue	array.h	/^void CArray<T>::SetValue(int Index,T Value)$/;"	f	class:Array::CArray	signature:(int Index,T Value)
Size	arraystack.h	/^		int Size();$/;"	p	class:ArrayStack::CArrayStack	access:public	signature:()
Size	arraystack.h	/^int CArrayStack<T>::Size()$/;"	f	class:ArrayStack::CArrayStack	signature:()
Size	dualarraydeque.h	/^		int Size();$/;"	p	class:DualArrayDeque::CDualArrayDeque	access:public	signature:()
UTILS_H	utils.h	8;"	d
Utility	utils.h	/^namespace Utility$/;"	n
Utility::Max	utils.h	/^T Max(T a,T b)$/;"	f	namespace:Utility	signature:(T a,T b)
Utility::Min	utils.h	/^T Min(T a,T b)$/;"	f	namespace:Utility	signature:(T a,T b)
operator +	array.h	/^		T* operator+(int i);$/;"	p	class:Array::CArray	access:public	signature:(int i)
operator +	array.h	/^T* CArray<T>::operator+(int i)$/;"	f	class:Array::CArray	signature:(int i)
operator =	array.h	/^		CArray<T>& operator=(CArray<T> &ArrayB);$/;"	p	class:Array::CArray	access:public	signature:(CArray<T> &ArrayB)
operator =	array.h	/^CArray<T>& CArray<T>::operator=(CArray<T> &ArrayB)$/;"	f	class:Array::CArray	signature:(CArray<T> &ArrayB)
operator []	array.h	/^		T& operator[](int Index);$/;"	p	class:Array::CArray	access:public	signature:(int Index)
operator []	array.h	/^T& CArray<T>::operator[](int Index)$/;"	f	class:Array::CArray	signature:(int Index)
pArray	array.h	/^		T *pArray;$/;"	m	class:Array::CArray	access:protected
swap	array.h	/^		void swap(int i,int j);$/;"	p	class:Array::CArray	access:public	signature:(int i,int j)
swap	array.h	/^void CArray<T>::swap(int i,int j)$/;"	f	class:Array::CArray	signature:(int i,int j)
~CArray	array.h	/^		virtual ~CArray();$/;"	p	class:Array::CArray	access:public	signature:()
~CArray	array.h	/^CArray<T>::~CArray()$/;"	f	class:Array::CArray	signature:()
~CArrayStack	arraystack.cpp	/^	template CArrayStack<int*>::~CArrayStack();$/;"	p	class:ArrayStack::CArrayStack	file:	signature:()
~CArrayStack	arraystack.cpp	/^	template CArrayStack<int>::~CArrayStack();$/;"	p	class:ArrayStack::CArrayStack	file:	signature:()
~CArrayStack	arraystack.h	/^		virtual ~CArrayStack();$/;"	p	class:ArrayStack::CArrayStack	access:public	signature:()
~CArrayStack	arraystack.h	/^CArrayStack<T>::~CArrayStack()$/;"	f	class:ArrayStack::CArrayStack	signature:()
~CDualArrayDeque	dualarraydeque.h	/^		virtual ~CDualArrayDeque();$/;"	p	class:DualArrayDeque::CDualArrayDeque	access:public	signature:()
~CDualArrayDeque	dualarraydeque.h	/^CDualArrayDeque<T>::~CDualArrayDeque()$/;"	f	class:DualArrayDeque::CDualArrayDeque	signature:()
